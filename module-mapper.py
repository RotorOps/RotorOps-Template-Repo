import os

import yaml

import urllib.parse

home_dir = os.getcwd()


template_dirs = [

    'scenario',

    'forces',

    'import',

    ]



# create a new markdown file to hold the module map

# with open('module-map-v2.md', 'w') as mapdoc:

#     mapdoc.write('# Module Map\n\n')

#     mapdoc.write('This file is auto-generated by the module-mapper.py script.\n\n')



modules = []

config_errors = []



for d in template_dirs:

    os.chdir(os.path.join(home_dir, d))

    print("Current dir: " + os.getcwd())

    # mapdoc.write('## ' + d + '\n\n')  # for each template type, create a new section in the markdown file

    module_folders = next(os.walk('.'))[1]

    for folder in module_folders:



        module_filenames = []

        module = {}



        print("searching folder: " + folder)




        for filename in os.listdir(folder):

            # package files should not be in remote directory, so ignore

            if filename == "package.yaml":

                continue



            module_filenames.append(filename)



            # assume the yaml file is our scenario configuration file

            if filename.endswith(".yaml"):

                #print("found config file: " + filename)

                stream = open(os.path.join(folder, filename), 'r')

                config = yaml.safe_load(stream)

                #print("Config file yaml: " + str(config))



                if not 'type' in config:

                    config_errors.append(filename)

                    print('\nERROR: ' +  folder + '/' + filename + ' is missing the type attribute.\n')

                    continue



                if config['type'].lower() == 'scenario':

                    module['path'] = 'templates\Scenarios\downloaded'

                elif config['type'].lower() == 'forces':

                    module['path'] = 'templates\Forces\downloaded'

                elif config['type'].lower() == 'import':

                    module['path'] = 'templates\Imports\downloaded'

                else:

                    config_errors.append(filename)

                    print('\nERROR: ' +  folder + '/' + filename + ' is missing the type attribute.\n')

                    continue



                module['type'] = config['type'].lower()



                if 'name' in config:

                    print("Config file has name: " + config['name'])

                    module['name'] = config['name']



                if 'version' in config:

                    module['version'] = config['version']

                else:

                    module['version'] = 1

                #if a jpeg file exists with the same name as the yaml file, use it as the thumbnail and include the path

                if os.path.isfile(os.path.join(folder, filename.replace('.yaml', '.jpg'))):

                    module['thumbnail'] = os.path.join(d, folder, filename.replace('.yaml', '.jpg'))

                if 'description' in config:

                    module['description'] = config['description']





        print("Populating module attributes for " + folder)

        module['id'] = folder

        module['dist'] = 'add'

        module['requires'] = 1

        module['files'] = module_filenames

        modules.append(module)





print("Valid modules: " + str(len(modules)))

print(str(len(config_errors)) + " modules had errors in config file.")



if len(modules) > 0:

    modulemap = {}

    #print(str(modules))

    for m in modules:

        print("adding module: " + m["id"])

        modulemap[m['id']] = m



    os.chdir(home_dir)

    # create the file that will be used for managing downloads in the mission generator

    with open('module-map-v2.yaml', 'w') as mapfile:

            print("Creating map file...")

            yaml.dump(modulemap, mapfile)

            mapfile.close()

            print("Success.")


    # create a new markdown file called module-map500.md that will be used for documentation

    with open('module-map.md', 'w') as mapdoc:

        # loop through all the modules and seperate them into arrays of scenarios, forces, and imports


        modules_by_type = {"scenarios": [], "forces": []}

        for m in modules:

                if m['type'] == 'scenario':

                    modules_by_type['scenarios'].append(m)

                elif m['type'] == 'forces':

                    modules_by_type['forces'].append(m)



        print('found ' + str(len(modules_by_type['scenarios'])) + ' scenario files')
        print('found ' + str(len(modules_by_type['forces'])) + ' forces files')


        for t in modules_by_type:
            print(t)

            # loop through all the modules, and organize them alphabetically by module name


            modules_by_type[t] = sorted(modules_by_type[t], key=lambda k: k['name'])


            mapdoc.write('# ' + t.capitalize() + '\n\n')  # for each template type, create a new section in the markdown file

            # loop through all the modules of this type

            for m in modules_by_type[t]:

                if 'thumbnail' in m:

                    m['thumbnail'] = urllib.parse.quote(m['thumbnail'], safe=':/')
                    mapdoc.write('![](' + m['thumbnail'] + ')\n\n')

                mapdoc.write('## ' + m['name'] + '\n\n')

                # write the module id to the markdown file

                mapdoc.write('### ID: ' + m['id'] + '\n\n')

                # write the module version to the markdown file

                mapdoc.write('Version: ' + str(m['version']) + '\n\n')

                if 'description' in m:

                    mapdoc.write('Description: ' + m['description'] + '\n\n')

                mapdoc.write('---\n\n')




                # write the module files to the markdown file

                # mapdoc.write('Files: \n\n')

                # for f in m['files']:

                #     mapdoc.write('* ' + f + '\n')

    mapdoc.close()
